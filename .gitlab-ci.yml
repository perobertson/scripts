.build:
  interruptible: true
  stage: build
  tags:
    - docker
  script:
    # MRs create duplicate pipelines
    # https://gitlab.com/gitlab-org/gitlab/-/issues/201845#note_399196241
    - |
      if [ -n "${GITLAB_TOKEN}" ] && [ "${CI_PIPELINE_SOURCE}" == 'push' ]; then \
        OPENED_MR_ON_BRANCH="$(curl --header "Private-Token: $GITLAB_TOKEN" "https://$CI_SERVER_HOST/api/v4/merge_requests?project_id=$CI_PROJECT_ID&source_branch=$CI_COMMIT_BRANCH&state=opened")"; \
        if [ "${OPENED_MR_ON_BRANCH}" != "[]" ]; then \
          echo "There is at least one MR opened on branch $CI_COMMIT_BRANCH. Stopping the push pipeline in favor of the merge request pipeline"; \
          exit 1; \
        fi; \
      fi
    - su public --command='/usr/bin/curl -sSL https://gitlab.com/perobertson/scripts/raw/${CI_COMMIT_SHA}/setup.sh | bash'
    - su public --command='git status --short && test "$(git status --short)" = ""'
    - su public --command='cd "$HOME/Applications/dotfiles" && git status --short && test "$(git status --short)" = ""'
    # debug
    - su -l public --command="echo $PATH"
    # List installed tools
    - su -l public --command="tools"
    # Now check the versions
    - su -l public --command="ansible --version"
    - su -l public --command="bash --version"
    - su -l public --command="cargo --version"
    - su -l public --command="cargo-clippy --version"
    - su -l public --command="code --version"
    - su -l public --command="curl --version"
    - su -l public --command="docker --version"
    - su -l public --command="docker-compose --version"
    - su -l public --command="fd --version || echo 'fd unavailable'"
    - su -l public --command="flameshot --version"
    - su -l public --command="flatpak --version"
    - su -l public --command="gcc --version"
    - su -l public --command="git --version"
    - su -l public --command="gitui || echo 'gitui unavailable'"
    - su -l public --command="gzip --version"
    - su -l public --command="jq --version"
    - su -l public --command="keybase --version"
    - su -l public --command="make --version"
    - su -l public --command="node --version"
    - su -l public --command="npm --version"
    - su -l public --command="pip --version"
    - su -l public --command="python --version"
    - su -l public --command="python3 --version"
    - su -l public --command="rust-gdb --version"
    - su -l public --command="rustc --version"
    - su -l public --command="rustdoc --version"
    - su -l public --command="rustfmt --version"
    - su -l public --command="rustup --version"
    - su -l public --command="shellcheck --version"
    - su -l public --command="ssh -V"
    - su -l public --command="tree --version"
    - su -l public --command="wget --version"
    - su -l public --command="xz --version"
    - su -l public --command="zsh --version"
    # These commands do not have a version option
    - su -l public --command="command -v gitk"

.setup_archlinux:
  before_script:
    - whoami
    - echo "$HOME"
    - pwd
    - ls -laH
    - pacman -Syu --noconfirm
    - pacman -S --noconfirm sudo
    - "echo '%wheel  ALL=(ALL) NOPASSWD: ALL' > /etc/sudoers.d/ci"
    - useradd --user-group --create-home --groups=wheel --shell=/bin/bash public
    - cat /etc/passwd
    - cat /etc/group

.setup_fedora:
  before_script:
    - whoami
    - echo "$HOME"
    - pwd
    - ls -laH
    - dnf install -y sudo
    - "echo '%wheel  ALL=(ALL) NOPASSWD: ALL' > /etc/sudoers.d/ci"
    - useradd --user-group --create-home --groups=wheel --shell=/bin/bash public
    - cat /etc/passwd
    - cat /etc/group

.setup_ubuntu:
  before_script:
    - whoami
    - echo "$HOME"
    - pwd
    - ls -laH
    - apt-get update
    - apt-get install -y curl sudo
    - "echo '%sudo  ALL=(ALL) NOPASSWD: ALL' > /etc/sudoers.d/ci"
    - useradd --user-group --create-home --groups=sudo --shell=/bin/bash public
    - cat /etc/passwd
    - cat /etc/group

.rules_common_files: &rules_common_files
  - .gitlab-ci.yml
  - "**/*.sh"
  - setup.yml
  - ansible.cfg
  - bin/*
  - files/**/*
  - tasks/system/*.yml
  - tasks/user/*.yml

# Someday sequences will be mergable
# https://github.com/yaml/yaml/issues/48
.rules_archlinux:
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_MERGE_REQUEST_IID
    ### All
    - changes: *rules_common_files
    ### specific
    - changes:
      - bootstrap/(arch|manjaro).sh
      - tasks/system/archlinux/**/*
      - tasks/user/archlinux/**/*

.rules_debian: &rules_debian
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_MERGE_REQUEST_IID
    ### All
    - changes: *rules_common_files
    ### specific
    - changes:
      - bootstrap/(ubuntu).sh
      - tasks/system/debian/**/*
      - tasks/user/debian/**/*

.rules_redhat: &rules_redhat
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_MERGE_REQUEST_IID
    ### All
    - changes: *rules_common_files
    ### specific
    - changes:
      - bootstrap/(fedora).sh
      - tasks/system/redhat/**/*
      - tasks/user/redhat/**/*

lint:
  interruptible: true
  stage: build
  image: koalaman/shellcheck-alpine
  tags:
    - docker
  script:
    - shellcheck --external-sources setup.sh $(find . -name '*.sh' -path '**/latest/**')

archlinux:
  extends:
    - .build
    - .setup_archlinux
    - .rules_archlinux
  image: archlinux/base:latest

fedora_28:
  # EOL: 2019-05-28
  extends:
    - .build
    - .setup_fedora
    - .rules_redhat
  image: fedora:28

fedora_29:
  # EOL: 2019-11-30
  extends:
    - .build
    - .setup_fedora
    - .rules_redhat
  image: fedora:29

fedora_30:
  # EOL: 2020-05-26
  extends:
    - .build
    - .setup_fedora
    - .rules_redhat
  image: fedora:30

fedora_31:
  extends:
    - .build
    - .setup_fedora
    - .rules_redhat
  image: fedora:31

fedora_32:
  extends:
    - .build
    - .setup_fedora
    - .rules_redhat
  image: fedora:32

fedora_33:
  extends:
    - .build
    - .setup_fedora
    - .rules_redhat
  image: fedora:33
  allow_failure: true

fedora_rawhide:
  extends:
    - .build
    - .setup_fedora
    - .rules_redhat
  image: fedora:rawhide
  allow_failure: true

manjaro:
  extends:
    - .build
    - .setup_archlinux
    - .rules_archlinux
  image: manjarolinux/base:latest

ubuntu_18_04:
  # EOL: 2023-04
  extends:
    - .build
    - .setup_ubuntu
    - .rules_debian
  image: ubuntu:18.04

ubuntu_20_04:
  # EOL: 2025-04
  extends:
    - .build
    - .setup_ubuntu
    - .rules_debian
  image: ubuntu:20.04

deploy_github:
  stage: deploy
  script:
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "${GITHUB_KEY}" > ~/.ssh/id_rsa
    - echo "${GITHUB_KEY_PUB}" > ~/.ssh/id_rsa.pub
    - chmod 700 ~/.ssh/id_rsa*
    - ssh-keyscan 'github.com' >> ~/.ssh/known_hosts
    - git remote add github -t main git@github.com:perobertson/scripts.git
    - git fetch --all --verbose
    - git checkout -B "${CI_COMMIT_REF_NAME}"
    - git push --set-upstream github "${CI_COMMIT_REF_NAME}"
  after_script:
    - rm ~/.ssh/id_rsa
    - rm ~/.ssh/id_rsa.pub
  environment:
    name: github
  resource_group: github
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
