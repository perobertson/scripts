# CentOS EOL dates https://www.centos.org/centos-stream/
# Debian EOL dates https://wiki.debian.org/DebianReleases/
# Fedora EOL dates https://fedorapeople.org/groups/schedule/
# Ubuntu EOL dates https://wiki.ubuntu.com/Releases/
---
default:
  interruptible: true
  tags:
    - docker

stages:
  - build
  - lint
  - test
  - deploy

variables:
  ANSIBLE_FORCE_COLOR: "1"
  # https://bixense.com/clicolors/ standard for enabling colours in CI
  CLICOLOR: "1"

workflow:
  rules: &rules_default
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_MERGE_REQUEST_IID

.build_img:
  stage: build
  image:
    # debug image has a shell
    name: gcr.io/kaniko-project/executor:v1.9.1-debug
    entrypoint: [""]
  needs:
    - job: lint:shellcheck
      artifacts: false

.test:
  stage: test
  script:
    # GitLab clones the project as writable by everyone
    # This breaks checks that are done inside the tools
    - chmod -R go-w .
    # Container runs as root to support systemd as the init system
    # switch to the test user 'public' to run the scripts like a user would
    - su public --command="./setup.sh"
    - su public --command="./.gitlab/check_versions.bash"
    - su public --command="./.gitlab/verify_no_changes.sh"

.rules_archlinux:
  rules: *rules_default

.rules_debian:
  rules: *rules_default

.rules_eol:
  rules:
    - when: manual
      allow_failure: true

.rules_lint:
  rules: *rules_default

.rules_redhat:
  rules: *rules_default

# This rule set is for any OS which is not used as my primary
.rules_secondary_os:
  rules:
    - when: manual
      allow_failure: true

# This is used for distributions which are used as flags for upcoming errors
.rules_only_warn:
  rules:
    - allow_failure: true

build:linter:
  extends:
    - .build_img
  script:
    - mkdir -p /kaniko/.docker
    - |
      tee /kaniko/.docker/config.json <<-JSON
      {
        "auths": {
          "$CI_REGISTRY": {
            "username":"$CI_REGISTRY_USER",
            "password":"$CI_REGISTRY_PASSWORD"
          }
        }
      }
      JSON
    - >
      /kaniko/executor
      --cleanup
      --cache
      --cache-repo $CI_REGISTRY_IMAGE/cache
      --context $CI_PROJECT_DIR
      --destination $CI_REGISTRY_IMAGE/linter:$CI_COMMIT_REF_SLUG
      --dockerfile $CI_PROJECT_DIR/.gitlab/linter.dockerfile

build:archlinux:latest:
  extends:
    - .build_img
    - .rules_secondary_os
  script:
    - ./.gitlab/build_image.sh archlinux latest

build:centos:stream9:
  extends:
    - .build_img
    - .rules_secondary_os
  script:
    - ./.gitlab/build_image.sh centos stream9

build:debian:11:
  extends:
    - .build_img
    - .rules_secondary_os
  script:
    - ./.gitlab/build_image.sh debian 11

build:fedora:37:
  extends:
    - .build_img
  script:
    - ./.gitlab/build_image.sh fedora 37

build:fedora:38:
  extends:
    - .build_img
  script:
    - ./.gitlab/build_image.sh fedora 38
  # unreleased
  when: manual
  allow_failure: true

build:fedora:rawhide:
  extends:
    - .build_img
  script:
    - ./.gitlab/build_image.sh fedora rawhide
  # unreleased
  when: manual
  allow_failure: true

build:manjarolinux:latest:
  extends:
    - .build_img
  script:
    - ./.gitlab/build_image.sh manjarolinux latest

build:ubuntu:22.04:
  extends:
    - .build_img
  script:
    - ./.gitlab/build_image.sh ubuntu 22.04

lint:shellcheck:
  extends:
    - .rules_lint
  stage: .pre
  image: koalaman/shellcheck-alpine
  script:
    - shellcheck --external-sources setup.sh $(find . -name '*.sh' -path '**/latest/**')

lint:ansible:
  extends:
    - .rules_lint
  stage: lint
  image: $CI_REGISTRY_IMAGE/linter:$CI_COMMIT_REF_SLUG
  needs:
    - job: build:linter
      artifacts: false
  script:
    # ansible-lint uses git which checks directory ownership before running
    - git config --add safe.directory $CI_PROJECT_DIR
    - go-task ans:lint
    # Also check all other non ansible files
    - yamllint -f parsable .

test:archlinux:latest:
  extends:
    - .test
    - .rules_secondary_os
  image: ${CI_REGISTRY}/perobertson/scripts/archlinux:latest-${CI_COMMIT_REF_SLUG}
  needs:
    - job: build:archlinux:latest
      artifacts: false
    - job: lint:ansible
      artifacts: false

test:centos:stream9:
  extends:
    - .test
    - .rules_secondary_os
  image: ${CI_REGISTRY}/perobertson/scripts/centos:stream9-${CI_COMMIT_REF_SLUG}
  needs:
    - job: build:centos:stream9
      artifacts: false
    - job: lint:ansible
      artifacts: false

test:debian:11:
  extends:
    - .test
    - .rules_secondary_os
  image: ${CI_REGISTRY}/perobertson/scripts/debian:11-${CI_COMMIT_REF_SLUG}
  needs:
    - job: build:debian:11
      artifacts: false
    - job: lint:ansible
      artifacts: false

test:fedora:37:
  # EOL: 2023-11-14
  extends:
    - .test
    - .rules_redhat
  image: ${CI_REGISTRY}/perobertson/scripts/fedora:37-${CI_COMMIT_REF_SLUG}
  needs:
    - job: build:fedora:37
      artifacts: false
    - job: lint:ansible
      artifacts: false

test:fedora:38:
  # EOL: 2024-05-14
  extends:
    - .test
    - .rules_redhat
  image: ${CI_REGISTRY}/perobertson/scripts/fedora:38-${CI_COMMIT_REF_SLUG}
  needs:
    - job: build:fedora:38
      artifacts: false
    - job: lint:ansible
      artifacts: false
  # unreleased
  when: manual
  allow_failure: true

test:fedora:rawhide:
  extends:
    - .test
    - .rules_redhat
  image: ${CI_REGISTRY}/perobertson/scripts/fedora:rawhide-${CI_COMMIT_REF_SLUG}
  needs:
    - job: build:fedora:rawhide
      artifacts: false
    - job: lint:ansible
      artifacts: false
  # unreleased
  when: manual
  allow_failure: true

test:manjarolinux:latest:
  extends:
    - .test
    - .rules_archlinux
  image: ${CI_REGISTRY}/perobertson/scripts/manjarolinux:latest-${CI_COMMIT_REF_SLUG}
  needs:
    - job: build:manjarolinux:latest
      artifacts: false
    - job: lint:ansible
      artifacts: false

test:ubuntu:22.04:
  # EOL: 2027-04
  extends:
    - .test
    - .rules_debian
  image: ${CI_REGISTRY}/perobertson/scripts/ubuntu:22.04-${CI_COMMIT_REF_SLUG}
  needs:
    - job: build:ubuntu:22.04
      artifacts: false
    - job: lint:ansible
      artifacts: false

deploy:github:
  stage: deploy
  interruptible: false
  script:
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "${GITHUB_KEY}" > ~/.ssh/id_rsa
    - echo "${GITHUB_KEY_PUB}" > ~/.ssh/id_rsa.pub
    - chmod 700 ~/.ssh/id_rsa*
    - ssh-keyscan 'github.com' >> ~/.ssh/known_hosts
    - git remote add github -t main git@github.com:perobertson/scripts.git
    - git fetch --all --verbose
    - git checkout -B "${CI_COMMIT_REF_NAME}"
    - git push --set-upstream github "${CI_COMMIT_REF_NAME}"
  after_script:
    - rm ~/.ssh/id_rsa
    - rm ~/.ssh/id_rsa.pub
  environment:
    name: github
  resource_group: github
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
